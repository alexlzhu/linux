load("@builtins//:test_utils.td.bzl", "true")
load("@builtins//:schedule_type.td.bzl", "schedule_type_is")
load("//config:debug.td.bzl", "DEBUG_OPTIONS_DEF")
load("//config:flavors.td.bzl", "FLAVORS_DEF")

td_rule(
    name = "lint",
    predicate = schedule_type_is("diff"),
    output = output.sandcastle(
        {
            "alias": "lint",
            "command": "SandcastleKernelLintCommand",
            "args": {"async_lint": True},
            "description": "checkpatch.pl lint",
        },
    ),
)

def build(alias, do_kerneltest, notify, tags = None, priority = None,
          modules = True, selftests = False, **kwargs):
    args = {
        "build_only": not do_kerneltest,
        # we don't need fbcode to build the kernel, only to build tests, which
        # will happen in separate sandcastle jobs
        "disable_secondary_checkouts": True,
        # don't notify builder on diffs
        "notify": notify,
        "build_modules": modules,
        "build_mode": "selftests" if selftests else "kernel",
    }
    args.update(kwargs)
    if not tags:
        tags = []
    if "diff" in tags:
        args["sign_modules"] = True
        args["sign_modules_key"] = "hsm-test-key"

    tags = ["kernel", "linux-kernel", "kernel-contbuild"] + tags
    return output.sandcastle(
        {
            "alias": alias,
            "command": "SandcastleKernelBuildCommand",
            "args": args,
            "oncall": "kernel_infra",
            "retries": 1,
            "tags": tags,
            "priority": priority,
        },
    )

td_rule(
    name = "linux-kernel-x86_64-diff",
    predicate = schedule_type_is("diff"),
    # don't notify on diff builds
    output = build(
        alias = "linux-kernel-x86_64",
        do_kerneltest = True,
        notify = False,
        tags = ["diff"],
    ),
)

td_rule(
    name = "linux-kernel-x86_64-selfests-diff",
    predicate = schedule_type_is("diff"),
    # don't notify on diff builds
    output = build(
        alias = "linux-kernel-x86_64-selftests",
        do_kerneltest = True,
        notify = False,
        tags = ["diff"],
        selftests = True,
    ),
)

td_rule(
    name = "linux-kernel-x86_64-adhoc",
    predicate = schedule_type_is("adhoc"),
    # adhoc builds are manually requested, so default to notifying when done
    output = build(
        alias = "linux-kernel-x86_64",
        do_kerneltest = True,
        notify = True,
        tags = ["adhoc"],
    ),
)

td_rule(
    name = "linux-kernel-x86_64-contbuild",
    predicate = schedule_type_is("continuous"),
    output = build(
        alias = "linux-kernel-x86_64",
        do_kerneltest = True,
        notify = False,
    ),
)

td_rule(
    name = "linux-kernel-x86_64-selftests-contbuild",
    predicate = schedule_type_is("continuous"),
    output = build(
        alias = "linux-kernel-x86_64-selftests",
        do_kerneltest = True,
        notify = False,
        selftests = True,
    ),
)

[
    (
        td_rule(
            name = "linux-kernel-x86_64-{}-diff".format(flavor),
            predicate = schedule_type_is("diff"),
            output = build(
                alias = "linux-kernel-x86_64-{}".format(flavor),
                do_kerneltest = False,
                notify = False,
                flavor = flavor,
                tags = ["diff"],
            ),
        ),
        td_rule(
            name = "linux-kernel-x86_64-{}-adhoc".format(flavor),
            predicate = schedule_type_is("adhoc"),
            output = build(
                alias = "linux-kernel-x86_64-{}".format(flavor),
                do_kerneltest = False,
                notify = True,
                flavor = flavor,
                tags = ["adhoc"],
            ),
        ),
        td_rule(
            name = "linux-kernel-x86_64-{}-contbuild".format(flavor),
            predicate = schedule_type_is("continuous"),
            output = build(
                alias = "linux-kernel-x86_64-{}".format(flavor),
                do_kerneltest = False,
                notify = False,
                flavor = flavor,
            ),
        ),
        td_rule(
            name = "linux-kernel-x86_64-selftests-{}-contbuild".format(flavor),
            predicate = schedule_type_is("continuous"),
            output = build(
                alias = "linux-kernel-x86_64-selftests-{}".format(flavor),
                do_kerneltest = False,
                notify = False,
                flavor = flavor,
                selftests = True,
            ),
        ),
    )
    for flavor in FLAVORS_DEF
]

[
    td_rule(
        name = "linux-kernel-x86_64-{}-contbuild".format(debug.lower()),
        predicate = schedule_type_is("continuous"),
        output = build(
            alias = "linux-kernel-x86_64-{}".format(debug.lower()),
            do_kerneltest = True,
            notify = False,
            debug_option = debug,
            modules = False,
            priority = 7,  # low
            tags = ["debug"],
        ),
    )
    for debug in DEBUG_OPTIONS_DEF
]
